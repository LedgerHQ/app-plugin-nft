import { processTest, populateTransaction } from "./test.fixture";

const contractName = "MultiMint1155";

const testLabel = "mintSignV2"; // <= Name of the test
const testDirSuffix = "mint_sign_v2"; // <= directory to compare device snapshots to
const signedPlugin = false;
const testNetwork = "ethereum_goerli";

const contractAddr = "0x12b180053db389b6200e6f646949e6ab7b385d40";
const chainID = 1;

// [0]  0000000000000000000000000000000000000000000000000000000000000080  args offset [4]
// [1]  0000000000000000000000000000000000000000000000000000000000000120  signatures[] offset [9]
// [2]  00000000000000000000000000000000000000000000000000000000000001e0  deadlines[] offset [15]
// [3]  0000000000000000000000000000000000000000000000000000000000000220  data offset [17]
// [4]  0000000000000000000000000000000000000000000000000000000000000001  nb of objects in args tuple
// [5]  0000000000000000000000000000000000000000000000000000000000000001  args.0.tokenId
// [6]  0000000000000000000000000000000000000000000000000000000000000002  args.0.amount
// [7]  0000000000000000000000000000000000000000000000000000000000000003  args.0.tokenGateId
// [8]  00000000000000000000000012b180053db389b6200e6f646949e6ab7b385d40  args.0.pass
// [9]  0000000000000000000000000000000000000000000000000000000000000001  nb of elts in signatures[]
// [10] 0000000000000000000000000000000000000000000000000000000000000020  signatures.0 offset
// [11] 0000000000000000000000000000000000000000000000000000000000000041  signatures.0 length
// [12] 56efc3f267021a912109919202b8e74e1ddf474486f43d0880bbfa1c1bd54b44  signatures.0 (first 20 bytes)
// [13] f62881888f136d40a9b8e02a792bbf175284fe736ad470fb551ba57751f81717  signatures.0 (next  20 bytes)
// [14] a300000000000000000000000000000000000000000000000000000000000000  signatures.0 (last   1 byte)
// [15] 0000000000000000000000000000000000000000000000000000000000000001  nb of elts in deadlines[]
// [16] 0000000000000000000000000000000000000000000000000000000063f4a5f5  deadlines.0
// [17] 0000000000000000000000000000000000000000000000000000000000000004  data.length
// [18] 7465737400000000000000000000000000000000000000000000000000000000  data
const inputData = "0x657bb1130000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000012b180053db389b6200e6f646949e6ab7b385d4000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004156efc3f267021a912109919202b8e74e1ddf474486f43d0880bbfa1c1bd54b44f62881888f136d40a9b8e02a792bbf175284fe736ad470fb551ba57751f81717a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000063f4a5f500000000000000000000000000000000000000000000000000000000000000047465737400000000000000000000000000000000000000000000000000000000"
const value = "0.8";

// Create serializedTx and remove the "0x" prefix
const serializedTx = populateTransaction(contractAddr, inputData, chainID, value);

const devices = [
    {
        name: "nanos",
        label: "Nano S",
        steps: 9, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanox",
        label: "Nano X",
        steps: 7, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanosp",
        label: "Nano S+",
        steps: 7, // <= Define the number of steps for this test case and this device
    },
];

devices.forEach((device) => {
    processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork);
});