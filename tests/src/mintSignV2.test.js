import { processTest, populateTransaction } from "./test.fixture";

const contractName = "MultiMint1155";

const testLabel = "mintSignV2"; // <= Name of the test
const testDirSuffix = "mint_sign_v2"; // <= directory to compare device snapshots to
const signedPlugin = false;
const testNetwork = "ethereum_goerli";

const contractAddr = "0x12b180053db389b6200e6f646949e6ab7b385d40";
const chainID = 1;
// from https://etherscan.io/tx/0xc5440bf9641d10072d5fa0d20c0c24f23d46e86c2ccc0b4d5d04d1ebdf5a3c33
// MethodID: 0x657bb113
// [0]:  0000000000000000000000000000000000000000000000000000000000000080  args offset [4]
// [1]:  00000000000000000000000000000000000000000000000000000000000001a0  signatures[] offset [9]
// [2]:  0000000000000000000000000000000000000000000000000000000000000300  deadlines[] offset [15]
// [3]:  0000000000000000000000000000000000000000000000000000000000000360  data offset [17]
// [4]:  0000000000000000000000000000000000000000000000000000000000000002  nb of objects in args tuple
// [5]:  0000000000000000000000000000000000000000000000000000000000000001  args.0.tokenId
// [6]:  0000000000000000000000000000000000000000000000000000000000000001  args.0.amount
// [7]:  00000000000000000000000000000000000000000000000000000000000009d8  args.0.tokenGateId
// [8]:  00000000000000000000000033c6eec1723b12c46732f7ab41398de45641fa42  args.0.pass
// [9]:  0000000000000000000000000000000000000000000000000000000000000001  args.1.tokenId
// [10]: 0000000000000000000000000000000000000000000000000000000000000001  args.1.amount
// [11]: 000000000000000000000000000000000000000000000000000000000000263a  args.1.tokenGateId
// [12]: 00000000000000000000000033c6eec1723b12c46732f7ab41398de45641fa42  args.1.pass
// [13]: 0000000000000000000000000000000000000000000000000000000000000002  nb of elts in signatures[]
// [14]: 0000000000000000000000000000000000000000000000000000000000000040  signatures.0 offset
// [15]: 00000000000000000000000000000000000000000000000000000000000000c0  signatures.1 offset
// [16]: 0000000000000000000000000000000000000000000000000000000000000041  signatures.0 length
// [17]: e075bc97d09d5dfd3bedd4794950ddf293ede1fd8c7a5e50dc2e006b3b4174b3  signatures.0 (first 20 bytes)
// [18]: 7e894bd79e378ded14444ae50d49da6992eb109b680f40af481bb4167bd0c790  signatures.0 (next  20 bytes)
// [19]: 1c00000000000000000000000000000000000000000000000000000000000000  signatures.0 (last   1 byte)
// [20]: 0000000000000000000000000000000000000000000000000000000000000041  signatures.1 length
// [21]: c09769ad76a5540543e56c4a09de957398dfab6561bc1b46b5bb3f66933180ba  signatures.1 (first 20 bytes)
// [22]: 01a8cc9575b4e064b214b39718460ec50b73a98e762583cf59e658537976f3b1  signatures.1 (next  20 bytes)
// [23]: 1c00000000000000000000000000000000000000000000000000000000000000  signatures.1 (last   1 byte)
// [24]: 0000000000000000000000000000000000000000000000000000000000000002  nb of elts in deadlines[]
// [25]: 00000000000000000000000000000000000000000000000000000000642be555  deadlines.0
// [26]: 00000000000000000000000000000000000000000000000000000000642be555  data.length
// [27]: 0000000000000000000000000000000000000000000000000000000000000000  data
const inputData = "0x657bb113000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000009d800000000000000000000000033c6eec1723b12c46732f7ab41398de45641fa4200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000263a00000000000000000000000033c6eec1723b12c46732f7ab41398de45641fa420000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000041e075bc97d09d5dfd3bedd4794950ddf293ede1fd8c7a5e50dc2e006b3b4174b37e894bd79e378ded14444ae50d49da6992eb109b680f40af481bb4167bd0c7901c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041c09769ad76a5540543e56c4a09de957398dfab6561bc1b46b5bb3f66933180ba01a8cc9575b4e064b214b39718460ec50b73a98e762583cf59e658537976f3b11c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000642be55500000000000000000000000000000000000000000000000000000000642be5550000000000000000000000000000000000000000000000000000000000000000"
const value = "0";

// Create serializedTx and remove the "0x" prefix
const serializedTx = populateTransaction(contractAddr, inputData, chainID, value);

const devices = [
    {
        name: "nanos",
        label: "Nano S",
        steps: 9, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanox",
        label: "Nano X",
        steps: 7, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanosp",
        label: "Nano S+",
        steps: 7, // <= Define the number of steps for this test case and this device
    },
];

devices.forEach((device) => {
    processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork);
});