import { processTest, populateTransaction } from "./test.fixture";

const contractName = "StableMultiMintERC721";

const testLabel = "StableMintSign"; // <= Name of the test
const testDirSuffix = "stable_mint_sign"; // <= directory to compare device snapshots to
const signedPlugin = false;
const testNetwork = "ethereum";

const contractAddr = "0x9ea4571a739a1d644e17d34a86e7dee97609b256";
const chainID = 1;

// [0]  000000000000000000000000000000000000000000000000000000000000005b  Amount
// [1]  00000000000000000000000000000000000000000000000000000000000000cc  MaxAmount
// [2]  0000000000000000000000000000000000000000000000000000000000000120  Signature offset: [9]
// [3]  000000000000000000000000be2f0aa33ade86b3c324f50f25eeb1a366b7ebe8  Owner
// [4]  0000000000000000000000000000000000000000000000000000000000000038  Value
// [5]  0000000000000000000000000000000000000000000000000000000063f4a5f5  Deadline
// [6]  0000000000000000000000000000000000000000000000000000000000000038  V
// [7]  efc3f267021a912109919202b8e74e1ddf474486f43d0880bbfa1c1bd54b44f6  R
// [8]  2881888f136d40a9b8e02a792bbf175284fe736ad470fb551ba57751f81717a3  S
// [9]  0000000000000000000000000000000000000000000000000000000000000041  Signature byte length (65)
// [10] 56efc3f267021a912109919202b8e74e1ddf474486f43d0880bbfa1c1bd54b44  Signature (first 32 bytes)
// [11] f62881888f136d40a9b8e02a792bbf175284fe736ad470fb551ba57751f81717  Signature  (next 32 bytes)
// [12] a300000000000000000000000000000000000000000000000000000000000000  Signature  (last  1 byte)
const inputData = "0x11413601000000000000000000000000000000000000000000000000000000000000005b00000000000000000000000000000000000000000000000000000000000000cc0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000be2f0aa33ade86b3c324f50f25eeb1a366b7ebe800000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000063f4a5f50000000000000000000000000000000000000000000000000000000000000038efc3f267021a912109919202b8e74e1ddf474486f43d0880bbfa1c1bd54b44f62881888f136d40a9b8e02a792bbf175284fe736ad470fb551ba57751f81717a3000000000000000000000000000000000000000000000000000000000000004156efc3f267021a912109919202b8e74e1ddf474486f43d0880bbfa1c1bd54b44f62881888f136d40a9b8e02a792bbf175284fe736ad470fb551ba57751f81717a300000000000000000000000000000000000000000000000000000000000000"
const value = "12.0";

// Create serializedTx and remove the "0x" prefix
const serializedTx = populateTransaction(contractAddr, inputData, chainID, value);

const devices = [
    {
        name: "nanos",
        label: "Nano S",
        steps: 5, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanox",
        label: "Nano X",
        steps: 5, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanosp",
        label: "Nano S+",
        steps: 5, // <= Define the number of steps for this test case and this device
    },

];

devices.forEach((device) => {
    processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork);
});